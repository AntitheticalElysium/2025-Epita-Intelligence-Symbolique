import pytest
import jpype
import os
from pathlib import Path
import logging

# Importer les dépendances nécessaires depuis jvm_setup
# Assurez-vous que PORTABLE_JDK_PATH et shutdown_jvm_if_needed sont accessibles
# Si jvm_setup.py est dans un parent, ajustez l'import ou copiez les définitions nécessaires.
# Pour cet exemple, nous supposons que argumentation_analysis est dans le PYTHONPATH
from argumentation_analysis.core.jvm_setup import PORTABLE_JDK_PATH, shutdown_jvm_if_needed, LIBS_DIR

logger = logging.getLogger(__name__)

@pytest.fixture(scope="function") # Changé de "session" à "function"
def real_jvm_minimal_function_scope(request):
    """
    Fixture de fonction pour démarrer et arrêter la JVM pour chaque test
    qui en a besoin, en utilisant un classpath minimal (vide pour l'instant).
    """
    original_use_real_jpype = os.environ.get('USE_REAL_JPYPE')
    os.environ['USE_REAL_JPYPE'] = 'true'
    logger.info(f"FIXTURE real_jvm_minimal_function_scope: USE_REAL_JPYPE forcé à 'true'")

    if jpype.isJVMStarted():
        # Cela ne devrait pas arriver avec une scope="function" si les tests précédents nettoient bien,
        # mais c'est une sécurité.
        logger.warning("FIXTURE real_jvm_minimal_function_scope: JVM déjà démarrée au début d'une fixture de fonction. C'est inattendu.")
        # Forcer l'arrêt pour essayer de repartir d'un état propre pour CE test.
        shutdown_jvm_if_needed()
        if jpype.isJVMStarted():
            logger.error("FIXTURE real_jvm_minimal_function_scope: Tentative d'arrêt de la JVM préexistante a échoué.")
            pytest.skip("Impossible de garantir un état JVM propre pour le test.")
        logger.info("FIXTURE real_jvm_minimal_function_scope: JVM préexistante arrêtée.")


    logger.info("FIXTURE real_jvm_minimal_function_scope: Tentative de démarrage de la JVM.")
    jvm_started_by_fixture = False
    try:
        jvmpath = str(Path(PORTABLE_JDK_PATH) / "bin" / "server" / "jvm.dll")
        classpath = []
        jvm_options = ['-Xms128m', '-Xmx512m', '-Dfile.encoding=UTF-8', '-Djava.awt.headless=true']
        
        logger.info(f"  FIXTURE (function) jvmpath: {jvmpath}")
        logger.info(f"  FIXTURE (function) classpath: {classpath}")
        logger.info(f"  FIXTURE (function) jvm_options: {jvm_options}")
        logger.info(f"  FIXTURE (function) convertStrings: False")

        jpype.startJVM(
            jvmpath=jvmpath,
            classpath=classpath,
            *jvm_options,
            convertStrings=False
        )
        jvm_started_by_fixture = True
        logger.info("FIXTURE real_jvm_minimal_function_scope: jpype.startJVM() exécuté avec succès.")
        
        yield # Les tests s'exécutent ici

    except Exception as e:
        logger.critical(f"FIXTURE real_jvm_minimal_function_scope: ERREUR CRITIQUE lors du démarrage de la JVM: {e}", exc_info=True)
        raise
    finally:
        logger.info("FIXTURE real_jvm_minimal_function_scope: Bloc finally atteint.")
        if jvm_started_by_fixture and jpype.isJVMStarted():
            logger.info("FIXTURE real_jvm_minimal_function_scope: Arrêt de la JVM démarrée par cette fixture.")
            shutdown_jvm_if_needed()
            logger.info("FIXTURE real_jvm_minimal_function_scope: JVM arrêtée.")
        elif jpype.isJVMStarted(): # Si elle est démarrée mais pas par cette fixture (ex: échec avant jvm_started_by_fixture=True)
            logger.warning("FIXTURE real_jvm_minimal_function_scope: La JVM est démarrée mais n'a peut-être pas été initiée correctement par cette fixture. Tentative d'arrêt.")
            shutdown_jvm_if_needed()
        
        if original_use_real_jpype is not None:
            os.environ['USE_REAL_JPYPE'] = original_use_real_jpype
            logger.info(f"FIXTURE real_jvm_minimal_function_scope: USE_REAL_JPYPE restauré à '{original_use_real_jpype}'")
        elif 'USE_REAL_JPYPE' in os.environ:
            del os.environ['USE_REAL_JPYPE']
            logger.info(f"FIXTURE real_jvm_minimal_function_scope: USE_REAL_JPYPE supprimé.")

# Vous pouvez ajouter d'autres fixtures ou configurations ici si nécessaire.
# Par exemple, la logique de jpype_setup.py pourrait être intégrée ici
# ou appelée depuis des fixtures si elle est toujours pertinente.
# Pour l'instant, nous nous concentrons sur le démarrage minimal de la JVM.

# Assurer que les logs de cette fixture sont visibles
logging.getLogger("tests.conftest").setLevel(logging.INFO)
